/*插件*/
apply plugin: 'java'
apply from: 'dependencies.gradle'

allprojects{
    /*坐标*/
    group 'com.kong'
    version '1.0-SNAPSHOT'
    /*自带插件*/
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    /*1.8环境*/
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    /*UTF-8 很重要*/
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.warnings = false
    }

    tasks.withType(org.gradle.api.tasks.javadoc.Javadoc) {
        options.encoding = 'UTF-8'
    }

    javadoc {
        options.charSet = 'UTF-8'
    }
}

/** 子项目配置 */
subprojects {
    configurations {
        provided
        compile.extendsFrom provided
        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    /*类库配置*/
    repositories {
        repositories { maven { url 'xxx' } }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        //都会依赖spring
        //compile group: "xxx", name: "xxx", version: "$xxx", changing: true
        compile 'org.springframework:spring-core:4.2.4.RELEASE'
        compile 'org.springframework:spring-web:4.2.4.RELEASE'
        compile 'org.springframework:spring-webmvc:4.2.4.RELEASE'
        compile 'org.springframework:spring-jdbc:4.2.4.RELEASE'
        compile 'org.springframework:spring-context-support:4.2.4.RELEASE'
        compile 'ch.qos.logback:logback-core:1.1.3'
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'com.google.guava:guava:19.0'
        compile 'org.apache.curator:curator-recipes:3.0.0'
        // 加载libs目录下所有的jar
        compile fileTree(dir: 'libs', include: ['*.jar'])
    }

    //生成源码jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    //生成javadoc的jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    /** 有时候会报错，但需要执行 */
    task createREADME() {
        file("README.md").createNewFile()
    }

    //上传maven仓库
    /**
    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://xxx") {
                    authentication(userName: "xxx", password: "xxx")
                }
                repository(url: "xxx") {
                    authentication(userName: "xxx", password: "xxx")
                }
            }
        }
    }**/
}

/*生成javadoc*/
/**
def exportedProjects = [
        ":xx-api",
        ":xx-domain"
]**/
/**
task alljavadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PRIVATE
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}**/